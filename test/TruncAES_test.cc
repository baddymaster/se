//
// AES_test.cpp
// BlindStorage Test
//
// AES CTR test vectors source: http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf
//

#include "./../src/AES.h"
#include "./../src/helper.h"
#include "./../src/Debug.h"
#include "gtest/gtest.h"

#define KEY_SIZE 16
#define TRUNC_BLOCK_SIZE 8

void AES_CTR_ENC_TEST(unsigned char plaintext[], unsigned char ciphertext_expected[], int size, unsigned char key[], unsigned char iv[]);
void AES_CTR_DEC_TEST(unsigned char ciphertext[], unsigned char plaintext_expected[], int size, unsigned char key[], unsigned char iv[]);

TEST(TruncAESCTREncryption, NISTTestVector1){
	unsigned char key[] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
	unsigned char iv[] = {0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff};
	unsigned char plaintext[] = {0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96}; 
	unsigned char ciphertext_expected[] = {0x87, 0x4d, 0x61, 0x91, 0xb6, 0x20, 0xe3, 0x26};
	AES_CTR_ENC_TEST(plaintext, ciphertext_expected, TRUNC_BLOCK_SIZE, key, iv);
}

TEST(TruncAESCTREncryption, NISTTestVector2){
	unsigned char key[] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
	unsigned char iv[] = {0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xff, 0x00};
	unsigned char plaintext[] = {0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c}; 
	unsigned char ciphertext_expected[] = {0x98, 0x06, 0xf6, 0x6b, 0x79, 0x70, 0xfd, 0xff}; 
	AES_CTR_ENC_TEST(plaintext, ciphertext_expected, TRUNC_BLOCK_SIZE, key, iv);
}

TEST(TruncAESCTREncryption, NISTTestVector3){
	unsigned char key[] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
	unsigned char iv[] = {0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xff, 0x01};
	unsigned char plaintext[] = {0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11}; 
	unsigned char ciphertext_expected[] = {0x5a, 0xe4, 0xdf, 0x3e, 0xdb, 0xd5, 0xd3, 0x5e};
	AES_CTR_ENC_TEST(plaintext, ciphertext_expected, TRUNC_BLOCK_SIZE, key, iv);
}

TEST(TruncAESCTREncryption, NISTTestVector4){
	unsigned char key[] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
	unsigned char iv[] = {0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xff, 0x02};
	unsigned char plaintext[] = {0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17};
	unsigned char ciphertext_expected[] = {0x1e, 0x03, 0x1d, 0xda, 0x2f, 0xbe, 0x03, 0xd1};
	AES_CTR_ENC_TEST(plaintext, ciphertext_expected, TRUNC_BLOCK_SIZE, key , iv);
}

TEST(TruncAESCTRDecryption, NISTTestVector1){
	unsigned char key[] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
	unsigned char iv[] = {0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff};
	unsigned char ciphertext[] = {0x87, 0x4d, 0x61, 0x91, 0xb6, 0x20, 0xe3, 0x26};
	unsigned char plaintext_expected[] = {0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96};
	AES_CTR_DEC_TEST(ciphertext, plaintext_expected, TRUNC_BLOCK_SIZE, key, iv);
}

TEST(TruncAESCTRDecryption, NISTTestVector2){
	unsigned char key[] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
	unsigned char iv[] = {0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xff, 0x00};
	unsigned char ciphertext[] = {0x98, 0x06, 0xf6, 0x6b, 0x79, 0x70, 0xfd, 0xff};
	unsigned char plaintext_expected[] = {0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c};
	AES_CTR_DEC_TEST(ciphertext, plaintext_expected, TRUNC_BLOCK_SIZE, key, iv);
}

TEST(TruncAESCTRDecryption, NISTTestVector3){
	unsigned char key[] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
	unsigned char iv[] = {0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xff, 0x01};
	unsigned char ciphertext[] = {0x5a, 0xe4, 0xdf, 0x3e, 0xdb, 0xd5, 0xd3, 0x5e};
	unsigned char plaintext_expected[] = {0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11};
	AES_CTR_DEC_TEST(ciphertext, plaintext_expected, TRUNC_BLOCK_SIZE, key, iv);
}

TEST(TruncAESCTRDecryption, NISTTestVector4){
	unsigned char key[] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
	unsigned char iv[] = {0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xff, 0x02};
	unsigned char ciphertext[] = {0x1e, 0x03, 0x1d, 0xda, 0x2f, 0xbe, 0x03, 0xd1};
	unsigned char plaintext_expected[] = {0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17};
	AES_CTR_DEC_TEST(ciphertext, plaintext_expected, TRUNC_BLOCK_SIZE, key, iv);
}

void AES_CTR_ENC_TEST(unsigned char plaintext[], unsigned char ciphertext_expected[], int size, unsigned char key[], unsigned char iv[]){
	unsigned char ciphertext_actual[TRUNC_BLOCK_SIZE];
	AES cipher;
	cipher.ENC_CTR(plaintext, ciphertext_actual, TRUNC_BLOCK_SIZE, key, iv);
	EXPECT_TRUE( 0 == std::memcmp(ciphertext_expected, ciphertext_actual, TRUNC_BLOCK_SIZE));
}

void AES_CTR_DEC_TEST(unsigned char ciphertext[], unsigned char plaintext_expected[], int size, unsigned char key[], unsigned char iv[]){
	unsigned char plaintext_actual[TRUNC_BLOCK_SIZE];
	AES cipher;
	cipher.DEC_CTR(ciphertext, plaintext_actual, TRUNC_BLOCK_SIZE, key, iv);
	EXPECT_TRUE( 0 == std::memcmp(plaintext_expected, plaintext_actual, TRUNC_BLOCK_SIZE));
}
